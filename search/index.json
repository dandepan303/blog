[{"content":"\u0026ndash; Mouse Review Coming Soon \u0026ndash;\nUpdate 9/18/24: Testing mouse! Review coming next week!\nPhoto by Pawel Czerwinski on Unsplash\n","date":"2024-09-18T10:07:25Z","image":"https://dandepan303.github.io/blog/p/pulsar-xlite-v3-review/cover_hu4199462112415899034.jpg","permalink":"https://dandepan303.github.io/blog/p/pulsar-xlite-v3-review/","title":"Pulsar Xlite V3 Review (Size 2)"},{"content":" QUICK WARNING This is not a comprehensive guide. Just a blog post about how I did it myself. If you want to \u0026ldquo;mod/hack\u0026rdquo; your Switch, I recommend following thourough guides on Switch.hacks.guide and following the dissassembly guides on ifixit. As always, you, and only you, are responsible for what happens to your console.\nBackground I’ve had my Nintendo Switch sitting around and collecting dust for a while now. My interest was piqued when I learned about the combination of box64 and wine64, two programs that emulate x86 architectures and windows applications efficiently. I was even more excited when I learned about the switchroot project, a project that allows people to run Ubuntu 24.04, Fedora 39, and Android 14 on the Switch natively!\nHow powerful is the Switch? After doing a bit of research, the Switch runs on the Nvidia Tegra X1, an 8-year-old veteran ARM processor that still packs a bit of a punch!\nNormally, the Switch’s CPU is underclocked and undervolted to a meager 1 GHz (for thermals and battery life). On the other hand, the X1 is rated to go as fast as 2 ghz, and with the correct overclocking, we can achieve 2.3 GHz on the CPU, 1267 MHz on the GPU, and 2311 MHz on the RAM. This is more on par with the Snapdragon 821, very impressive for a processor of this age.\nHow can I jailbreak my Switch? The main factor in the method of jailbreaking your Switch depends on your model. There are 2 main “models” for the original Switch Erista 2017 - early 2018 models (also referred to as unpatched or V1) and Mariko (patched, V2). You can find out which one you have at Is My Switch Patched? and putting in your serial number.\nFor Erista consoles, there is a bug that exists, allowing you to short 2 pins on the right JoyCon rail to bypass BOOT0 and inject a payload for your Switch to boot instead of HorizonOS (normal Switch OS). This can be achieved by soldering a joy-con, or using a paperclip or rcm jig.\nFor Mariko (V2) consoles, they are only able to be jailbroken by using a modchip, which requires soldering 4 tiny contacts to 2 capacitors on the CPU to “voltage glitch” the CPU into booting payload.bin on the microsd card instead of BOOT0. The modchip works by infiltrating the communication between the main board and the sysnand. This is an extremely condensed explanation, and if you want to a full one, you can visit this website.\nFor Nintendo Switch oled models, you also need a modchip, but the process is much more lengthy and requires a microscope. I, personally own a Switch V2, so I will go down the modchip route.\nModchipping For modchipping my Switch, I will be using the Picofly Core, based on the fully open source RP2040 microcontroller and it\u0026rsquo;s firmware.\nYou can find this modchip on AliExpress by searching Picofly Core, for about $11-$12. I personally got the modchip in a flash sale, only costing me $1, making it $2.12 after taxes and shipping! Flash sales are pretty common, so I reccomend trying to find the modchip on multiple devices before buying.\nAfter waiting for around 2 weeks, the modchip is finally here!\nThe USB-C port on the modchip pugs into the computer, and by holding the BOOT button, we are able to flash the modchip with the latest firmware.\nYou may have noticed by now that there are 2 SoC ribbon cables with version numbers labeled on them. This is because the modchip is compatible with both V1 and V2 Switches. (The only reason you would install a modchip on a V1 Switch is if you don\u0026rsquo;t want to enter RCM every time you turn off and on the switch). For my purposes, I am using the V2 modchip SoC ribbon cable.\n6-year-old flux and 215C Sticks These are my recommendation for tools to install the modchip.\nA soldering iron with a small(er) tip (preferably temperature controlled that can reach 350C consistently) Good quality flux The right screwdriver bits (+00 and Y1.5 bits) Thermal paste (preferably non-conductive) Isopropyl Alcohol (preferably 95-99% IPA) Modchip (including the SoC ribbon cable) Toothpicks/Q-tips (to remove the thermal paste between the capacitors on the SoC die) Solder (leaded is recommended, unleaded will work depending on your skill level) Magnifying goggles/microscope (microscope is optional but recommended) Time to open the Switch up!\nThe four tri-point Y1.5 bits are Nintendo\u0026rsquo;s way of saying \u0026ldquo;keep out!\u0026rdquo;, but the back cover comes off easily after removing the 7+00 bits, 2 on top, 2 on bottom, one hidden under the micro-sd card, and both of the the third screws down from the top on each Joy-Con rail.\nIf you think about it, the Switch is really impressive for its form factor, having an ingenious active cooling system.\nNext step is to pick at and remove the micro-sd card reader.\nLet\u0026rsquo;s remove the 6 +00 screws to reveal the mainboard!\nRemoving the 3 screws on the heatsink reveals the IHS (Internal Heat Spreader), responsible for removing heat from the SoC die and the RAM. This is where the SoC ribbon cable will sit.\nTime to pry open the IHS to expose the bare SoC die and RAM chips.\nWe can now clean up the thermal paste on the SoC die and around/in-between the capacitors on the SoC using IPA and q-tips.\nBefore we can install the modchip, we have to pre-tin the ribbon cable. This works by putting on solder onto the contacts before we install it. This is much easier than melting the solder when it is on the capacitor because it could cause overbridging.\nAfter pre-tinning, we can melt the solder to bridge the capactor contacts.\nNow, all that is left to do is to unplug the eMMc module and insert the modchip itself!\nTurning the Switch on, we are greeted by the picofly menu!\nWe have installed the modchip successfully! This post is already getting long, so I will show what I will do with my jaibroken Switch in a later post. Stay tuned!\nPhotos by Me, Dean Hiran\n","date":"2024-09-13T08:34:23Z","image":"https://dandepan303.github.io/blog/p/hardmodding-my-switch/cover_hu7465967329347787597.jpg","permalink":"https://dandepan303.github.io/blog/p/hardmodding-my-switch/","title":"Hardmodding My Switch"},{"content":"Backstory I built this specific keyboard a month ago, (before this blog existed) and never thought about posting it until now. I was looking for something other than my modded Rainy75 Pro. After hours of researching, I decided on a creamy sound profile with linear switches, specifically Alpaca v2s. For the creamy sound profile, I decided on the Mode Envoy from mode designs with an FR4 plate, white coating, and gold accents and weights.\nAfter ordering all the parts, it was time to assemble them.\nMy personal lubing process Lubing is essential to getting a smoother glide on any switch. But even with today’s much better factory lubing, I prefer to lube my switches myself.\nFrom left to right: switch lubing station switch opener, Krytox 205g0, Krytox xht-bdz, Krytox 105g0, stem holder, brush. While not essential, the switch lubing station helps a lot when having to mass-lube. It contains slots for springs, stems, and both the bottom and the top housings.\nThe switch opener, in my opinion, is absolutely essential for lubing. You could, try to pry open each of your switches with a screwdriver, but that comes with a risk of hurting yourself.\nEach different type of lube has its own viscosity and use case. Krytox is a very popular brand in the hobbyist keyboard market, known for their industrial grade lubricants.\n205g0: Stems, housings, and springs of switches xht-bdz: Stabilizer wires (Ill get to this later) 105g0: Oil based lube for springs Stem holder: Pretty self explanatory. Holds stems for easy lubing. Not essential, but it makes things 100x easier. Brush: A brush. The switch opener makes things way easier. All you have to do is press down on the switch to open it.\nOnce the switch is opened, the switch has 4 main parts. The top and bottom housings, the stem, and the spring. Personally, I prefer to only lube the stem and the spring, as the spring, which contats the bottom housing, will lube the bottom housing automatically. The stem, which contacts the top housing and slides against it, will also lube the top housing.\nAfter inserting the switches, assembling the board with all the foams, and putting on the keycaps, we are done!\nResults The keyboard turned out great, and I think it provides a much needed contrast to my all black setup.\nNow, for the most important part, the sound!\nAn interesting sound profile, it has some cremy-ness to it, but it also has something else I can\u0026rsquo;t put my finger on. I personally like it!\nPhotos by Me, Dean Hiran\n","date":"2024-08-27T18:12:27Z","image":"https://dandepan303.github.io/blog/p/mode-envoy/cover_hu14354363835000133746.jpg","permalink":"https://dandepan303.github.io/blog/p/mode-envoy/","title":"My Favorite Keyboard Build So Far"},{"content":"Hey! It\u0026rsquo;s me, Dean. Welp, here we are. This is my (almost) selfhosted blog/portfolio/git server for my stuff. I will probably post anything here that I think is interesting.\nThis site is mostly inspired by my great friend nixwiz and you should check him out. He is way smarter than me and even has an ssh server located on his awesome (truly) selfhosted website.\nPhoto by Pawel Czerwinski on Unsplash\n","date":"2024-08-23T08:34:23Z","image":"https://dandepan303.github.io/blog/p/hello-world/cover_hu6307248181568134095.jpg","permalink":"https://dandepan303.github.io/blog/p/hello-world/","title":"Hello World?"}]